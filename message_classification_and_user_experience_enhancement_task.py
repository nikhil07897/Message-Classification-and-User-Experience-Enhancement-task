# -*- coding: utf-8 -*-
"""Message Classification and User Experience Enhancement task

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/159oygGIoQjp8ug1C2GcGrnWXO1PQoAo1
"""

import pandas as pd
import random
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.utils import shuffle
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import classification_report

categories = ['Spam', 'OTP', 'Transactional', 'Logistic', 'Fraud']
messages = {
    'Spam': [
        "Congratulations, you've won a lottery of $1M. Claim now!",
        "Limited offer: Get 50% off on your next purchase. Shop now!",
        "You've been selected for a free gift card. Click here!"
    ],
    'OTP': [
        "Your OTP for login is 123456. Valid for 10 minutes.",
        "Your one-time password for the transaction is 789123.",
        "Enter 654321 to verify your account. Expires in 5 minutes."
    ],
    'Transactional': [
        "Your electricity bill of $100 is due. Pay immediately.",
        "Reminder: Your gas bill of $50 is due tomorrow.",
        "Your water bill of $30 has been successfully paid."
    ],
    'Logistic': [
        "Your package has been shipped. Track it here: [Link]",
        "Package dispatched. Estimated delivery date: Tomorrow.",
        "Your delivery is out for shipment. Check updates here."
    ],
    'Fraud': [
        "Fraud alert: Suspicious activity detected on your account.",
        "Unusual login detected. Reset your password immediately.",
        "Unauthorized transaction detected. Report immediately!"
    ]
}

data = {
    'label': [label for label in categories for _ in range(200)],  # 200 samples per category
    'message': [random.choice(messages[label]) for label in categories for _ in range(200)]
}
df = pd.DataFrame(data)
df = shuffle(df, random_state=42)

X = df['message']
y = df['label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

vectorizer = TfidfVectorizer(ngram_range=(1, 2), stop_words='english', max_features=500)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

model = RandomForestClassifier(
    n_estimators=200,       # Number of trees
    max_depth=20,           # Maximum depth of each tree
    random_state=42,
    class_weight='balanced' # Handle imbalanced classes
)
model.fit(X_train_tfidf, y_train)

y_pred = model.predict(X_test_tfidf)

print("Classification Report:")
print(classification_report(y_test, y_pred))

accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

def simulate_actions(message):
    if "OTP" in message:
        print(f"Highlight OTP: {message}")
        print("Auto-delete after expiry.")
    elif "Track" in message or "package" in message:
        print(f"Track button enabled for: {message}")
    elif "bill" in message:
        print(f"Pay Now option displayed for: {message}")
    elif "Fraud" in message:
        print(f"Warning displayed: {message}")
    else:
        print(f"Standard message handling for: {message}")

sample_messages = [
    "Your OTP for login is 123456. Valid for 10 minutes.",
    "Your electricity bill of $100 is due. Pay immediately.",
    "Your package has been shipped. Track it here: [Link]",
    "Fraud alert: Suspicious activity detected on your account."
]

print("\nSimulated Actions:")
for msg in sample_messages:
    simulate_actions(msg)

report = classification_report(y_test, y_pred, target_names=categories, output_dict=True)

classes = categories
precision = [report[cls]['precision'] for cls in classes]
recall = [report[cls]['recall'] for cls in classes]
f1_score = [report[cls]['f1-score'] for cls in classes]

bar_width = 0.2

x = np.arange(len(classes))

plt.figure(figsize=(12, 6))
plt.bar(x - bar_width, precision, width=bar_width, label='Precision', color='blue')
plt.bar(x, recall, width=bar_width, label='Recall', color='green')
plt.bar(x + bar_width, f1_score, width=bar_width, label='F1-Score', color='orange')